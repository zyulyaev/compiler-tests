data ArrayList {
    buffer: [Int],
    size: Int
}

data ListIterator {
    list: List,
    next: Int
}

class Iterator {
    fun hasNext(): Int
    fun next(): Int
}

impl Iterator for ListIterator {
    fun hasNext(): Int
    begin
        return this.list.length() > this.next
    end

    fun next(): Int
    begin
        result := this.list.get(this.next);
        this.next := this.next + 1;
        return result
    end
}

class List {
    fun add(value: Int): None
    fun get(index: Int): Int
    fun length(): Int
    fun iterator(): Iterator
}

impl List for ArrayList {
    fun add(value: Int): None
    begin
        size := this.size;
        if size == arrlen(this.buffer) then
            prev := this.buffer;
            this.buffer := arrmake(this.size * 2, 0);
            for i := 0, i < size, i := i + 1 do
                this.buffer[i] := prev[i]
            od
        fi;
        this.buffer[size] := value;
        this.size := size + 1
    end

    fun get(index: Int): Int
    begin
        return this.buffer[index]
    end

    fun length(): Int
    begin
        return this.size
    end

    fun iterator(): Iterator
    begin
        return ListIterator {
            list: this,
            next: 0
        }
    end
}

fun arrayList(): ArrayList
begin
    return ArrayList {
        buffer: arrmake(4, 0),
        size: 0
    }
end

fun printList(list: List): None
begin
    for i := 0, i < list.length(), i := i + 1 do
        write(list.get(i))
    od
end

fun printIterator(iter: Iterator): None
begin
    while iter.hasNext() do
        write(iter.next())
    od
end

list := arrayList();
list.add(5);
list.add(4);
list.add(3);
list.add(2);
list.add(1);

printList(list);

write(0);

printIterator(list.iterator())